/*	сохраняем данный файл в кодировке UTF-8		*/

	author: Golinskiy Konstantin	e-mail: golinskiy.konstantin@gmail.com


В файле LCD1602_config.h устанавливаем настройки которые нам необходимы.

//################  SEYUP  ###############################################################################
//===============================================================================================
	4 битный режим ( подключение ):
	----------------------------------
	1) GND(VSS) - земля
	2) VDD 	- +5V питание
	3) V0 	- Вывод управления контрастом ( через потонциометр от 0 до 5 Вольт )
	4) RS 	- Выбор регистра ( команды или данные ) rs = 1 for data, rs=0 for command
	5) R/W 	- Чтение/запись ( режим записи при соединении с землей) если с дисплея нечего считывать не будем то соеденяем с землей
	6) E 	- Еnable (строб по спаду)
	7) DB0 	- линия данных  ( не используем в 4 битном режиме )
	8) DB1 	- линия данных  ( не используем в 4 битном режиме ) 
	9) DB2 	- линия данных  ( не используем в 4 битном режиме )
	10) DB3 - линия данных  ( не используем в 4 битном режиме )
	11) DB4 - линия данных	(используем в 4 битном режиме )
	12) DB5 - линия данных  (используем в 4 битном режиме )
	13) DB6 - линия данных  (используем в 4 битном режиме )
	14) DB7 - линия данных  (используем в 4 битном режиме )
	15) A	- плюс подсветки ( +5 вольт либо шим )
	16) K 	- минус подсветки
	
	Сам же дисплей может работать в двух режимах :
	• 8-битный режим - для этого используются и младшие и старшие биты (DB0- DB7)
	• 4-битный режим - для этого используются и только младшие биты (DB4- DB7)
	
	Использование 8-битного режима на данном дисплее не целесообразно. 
	Для его работы требуется на 4 ноги больше, а выигрыша в скорости практически нет 
	т.к. частота обновления данного дисплея упирается в предел < 10раз в секунду.
	//===============================================================================================
*/

		// выбираем через какой интефейс работает дисплей: --------------------------------------------------
		// ( нужное разкомментировать )
		//#define LCD1602_I2C			// режим I2C
		#define LCD1602_4BIT			// режим 4BIT
		//---------------------------------------------------------------------------------------------------
		
		
		#if defined (LCD1602_I2C)		// если выбран режим I2C ( то указываем адрес шины и какой I2C используем )--
		
			#define LCD_I2C					hi2c1
			#define ADRESS_I2C_LCD  		(0x3F << 1)	//  (0x27 << 1)  (0x3F << 1)
					
		#elif defined (LCD1602_4BIT)   // если выбран режим 4BIT ( то указываем пины куда подключили )--------------
		// при этом если их также назвали в CubeMX то указывать ненужно -------------------------------------
		
			// указываем пин ( Выбор регистра ( команды или данные ) )------------
			#ifndef RS_GPIO_Port
				#define RS_GPIO_Port   		GPIOB
				#define RS_Pin				GPIO_PIN_15
			#endif
			//--------------------------------------------------------------------
			// указываем пин Еnable (строб по спаду) -----------------------------
			#ifndef E_GPIO_Port
				#define E_GPIO_Port   		GPIOB
				#define E_Pin				GPIO_PIN_14
			#endif
			//--------------------------------------------------------------------
			// указываем пин DB4 - линия данных	(используем в 4 битном режиме )---
			#ifndef DB4_GPIO_Port
				#define DB4_GPIO_Port   	GPIOB
				#define DB4_Pin				GPIO_PIN_13
			#endif
			//--------------------------------------------------------------------
			// указываем пин DB5 - линия данных	(используем в 4 битном режиме )---
			#ifndef DB5_GPIO_Port
				#define DB5_GPIO_Port   	GPIOB
				#define DB5_Pin				GPIO_PIN_12
			#endif
			//--------------------------------------------------------------------
			// указываем пин DB6 - линия данных	(используем в 4 битном режиме )---
			#ifndef DB6_GPIO_Port
				#define DB6_GPIO_Port   	GPIOB
				#define DB6_Pin				GPIO_PIN_11
			#endif
			//--------------------------------------------------------------------
			// указываем пин DB7 - линия данных	(используем в 4 битном режиме )---
			#ifndef DB7_GPIO_Port
				#define DB7_GPIO_Port   	GPIOB
				#define DB7_Pin				GPIO_PIN_10
			#endif
			//--------------------------------------------------------------------
		#endif

		// если нужна кириллица то разкомментируем ( если кириллица не нужна то комментируем )---
		#define FONT_CYRILLIC
		//---------------------------------------------------------------------------------------
		
		
	//###########################################################################################################3
	
	#include "LCD1602.h"
	
	
	////////   Создаем свой символ   /////////////////////////////////////////////////////////////////////////////////////////////////////////

// Под каждый символ отводится 8 байт, а в каждом байте используются только первые пять бит. Тогда наш символ можно представить в виде массива, состоящего из восьми элементов.
uint8_t myChar_1[8] = {
							0xff,	// 11111
							0x00,	// 00000
							0x00,	// 00000 
							0x00,	// 00000
							0x00,	// 00000
							0x00,	// 00000
							0x00,	// 00000
							0x00	// 00000
						  };

uint8_t myChar_2[8] = {						
							0x00,	// 00000
							0xff,	// 11111
							0x00,	// 00000 
							0x00,	// 00000
							0x00,	// 00000
							0x00,	// 00000
							0x00,	// 00000
							0x00	// 00000
						  };

uint8_t myChar_3[8] = {						
							0x00,	// 00000
							0x00,	// 00000
							0xff,	// 11111 
							0x00,	// 00000
							0x00,	// 00000
							0x00,	// 00000
							0x00,	// 00000
							0x00	// 00000
						  };

uint8_t myChar_4[8] = {						
							0x00,	// 00000
							0x00,	// 00000
							0x00,	// 00000 
							0xff,	// 11111
							0x00,	// 00000
							0x00,	// 00000
							0x00,	// 00000
							0x00	// 00000
						  };

uint8_t myChar_5[8] = {						
							0x00,	// 00000
							0x00,	// 00000
							0x00,	// 00000 
							0x00,	// 00000
							0xff,	// 11111
							0x00,	// 00000
							0x00,	// 00000
							0x00	// 00000
						  };

uint8_t myChar_6[8] = {						
							0x00,	// 00000
							0x00,	// 00000
							0x00,	// 00000 
							0x00,	// 00000
							0x00,	// 00000
							0xff,	// 11111
							0x00,	// 00000
							0x00	// 00000
						  };

uint8_t myChar_7[8] = {						
							0x00,	// 00000
							0x00,	// 00000
							0x00,	// 00000 
							0x00,	// 00000
							0x00,	// 00000
							0x00,	// 00000
							0xff,	// 11111
							0x00	// 00000
						  };

uint8_t myChar_8[8] = {						
							0x00,	// 00000
							0x00,	// 00000
							0x00,	// 00000 
							0x00,	// 00000
							0x00,	// 00000
							0x00,	// 00000
							0x00,	// 00000
							0xff	// 11111
						  };

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




	.........
	.........

main()=============================================================================================================================

	.........
	.........
	.........

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 

	// Функция инициализации дисплея
	LCD_Init();
	
	
////////   записываем в память дисплея символы/////////////////////////////////////////////////////////////////////////////////////

// функция создания своего символа и записи его в память Первый параметр массив с символом второй парамет номер ячеки куда записали от 0 до 7 ( всего 8 символов можно записать )--------
LCD_CreateChar( myChar_1, 0 );
//LCD_CreateChar( myChar_2, 1 );
//LCD_CreateChar( myChar_3, 2 );
//LCD_CreateChar( myChar_4, 3 );
//LCD_CreateChar( myChar_5, 4 );
//LCD_CreateChar( myChar_6, 5 );
//LCD_CreateChar( myChar_7, 6 );
//LCD_CreateChar( myChar_8, 7 );

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	
	// Функция позиционирования ( 1-й параметр позиция символа , 2-й параметр строка, ( Счет с нуля )------------------
	LCD_SetCursor( 0, 0 );	
	// Функция печати строки на дисплее
	LCD_PrintString("Hello Odessa");
	
	// Функция позиционирования ( 1-й параметр позиция символа , 2-й параметр строка, ( Счет с нуля )------------------
	LCD_SetCursor( 0, 1 );	
	LCD_PrintString("Привет Одесса");
	
	// Функция позиционирования ( 1-й параметр позиция символа , 2-й параметр строка, ( Счет с нуля )------------------
	LCD_SetCursor( 15, 1 );

	// печатаем собственный символ под номером 0
	// перед вызавом своего символа обязательно вызываем LCD_SetCursor();
	LCD_PrintMyChar( 0 );
	HAL_Delay (1000);
		
	// Функция включения и выключения подсветки дисплея ( 0-выкл, 1 (либо другое от 0)- вкл -------------------------------------
	LCD_LedOnOff( 0 );
	HAL_Delay (1000);
	
	// Функция включения и выключения подсветки дисплея ( 0-выкл, 1 (либо другое от 0)- вкл -------------------------------------
	LCD_LedOnOff( 1 );
	HAL_Delay (1000);
	
	// функция двигает надпись вправо на 1 символ ( бегущая строка )
	for( uint8_t i = 0; i < 10; i++ ){
		LCD_StringRunR();
		HAL_Delay (300);
	}
	// функция двигает надпись влево на 1 символ ( бегущая строка )
	for( uint8_t i = 0; i < 10; i++ ){
		LCD_StringRunL();
		HAL_Delay (300);
	}
	
	// функция віключает надпись на єкране (єкран пустой ) и включает ее обратно ( 0- выкл, 1 ( или любое отличное от 0 ) вкл )--
	LCD_TextOnOff( 0 );
	HAL_Delay (1000);
	
	// функция віключает надпись на єкране (єкран пустой ) и включает ее обратно ( 0- выкл, 1 ( или любое отличное от 0 ) вкл )--
	LCD_TextOnOff( 1 );
	HAL_Delay (1000);
	
	// Функция очистки дисплея ----------------------------------------------------------------------------------------------
	LCD_Clear();
	HAL_Delay (1000);
	
	// Функция позиционирования ( 1-й параметр позиция символа , 2-й параметр строка, ( Счет с нуля )------------------
	LCD_SetCursor( 0, 0 );
	
	// Функция печати строки на дисплее
	LCD_PrintString("Hello Odessa");
	
	// Функция включения и выключения мигания курсора ( 0-выкл, 1 (либо другое от 0)- вкл
	LCD_CursorOnOff( 1 );
	
	HAL_Delay (3000);
	
	// Функция включения и выключения мигания курсора ( 0-выкл, 1 (либо другое от 0)- вкл
	LCD_CursorOnOff( 0 );
	
	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



while(1)===========================================================================================================================

	.........
	.........
	.........
	.........

=== end while(1) ==================================================================================================================
=== end main() ====================================================================================================================
